/*
 * Unit testing methods for an exercise
 */

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.*;

public class TestExercise {

    /* ************************************************************************* *
     *  Test UtilTaula.taulaToString()
     * ************************************************************************* */
    @Nested
    @DisplayName("Tests de UtilTaula.taulaToString()")
    class SobreTaulaToString{
        @Test
        @DisplayName("test UtilTaula.taulaToString() per 1x1 true amb X·")
        public void taula1x1TrueXPunt() {
            boolean[][] taula = {{true}};
            String expected = "X\n";
            String found = UtilTaula.taulaToString(taula, 'X', '·');
            assertEquals(expected, found, "Revisa el cas taulaToString() rep una taula 1x1");
        }
        @Test
        @DisplayName("test UtilTaula.taulaToString() per 1x1 false amb X·")
        public void taula1x1FalseXPunt() {
            boolean[][] taula = {{false}};
            String expected = "·\n";
            String found = UtilTaula.taulaToString(taula, 'X', '·');
            assertEquals(expected, found, "Revisa el cas taulaToString() rep una taula 1x1");
        }

        @Test
        @DisplayName("test UtilTaula.taulaToString() per 1x1 true amb AB")
        public void taula1x1TrueAB() {
            boolean[][] taula = {{true}};
            String expected = "A\n";
            String found = UtilTaula.taulaToString(taula, 'A', 'B');
            assertEquals(expected, found, "Revisa el cas taulaToString() rebi caràcters A i B");
        }
        @Test
        @DisplayName("test UtilTaula.taulaToString() per 1x1 false amb AB")
        public void taula1x1FalseAB() {
            boolean[][] taula = {{false}};
            String expected = "B\n";
            String found = UtilTaula.taulaToString(taula, 'A', 'B');
            assertEquals(expected, found, "Revisa el cas taulaToString() rebi caràcters A i B");
        }

        @Test
        @DisplayName("test UtilTaula.taulaToString() per escacs 3x4")
        public void taulaEscacs() {
            boolean[][] taula = {
                {true, false, true, false},
                {false, true, false, true},
                {true, false, true, false}
            };
            String expected = "X·X·\n·X·X\nX·X·\n";
            String found = UtilTaula.taulaToString(taula, 'X', '·');
            assertEquals(expected, found, "Revisa el cas taulaToString() rep una taula 3x4");
        }
    }

    /* ************************************************************ *
     * Test UtilTaula.inicialitzaPrimeraDiagonal()
     * ************************************************************ */
    @Nested
    @DisplayName("Test de UtilTaula.inicialitzaPrimeraDiagonal()")
    class SobreinicialitzaPrimeraDiagonal {
        @Test
        @DisplayName("test UtilTaula.inicialitzaPrimeraDiagonal() per 1x1")
        public void taula1x1() {
            boolean[][] taula = {{false}};
            boolean[][] expected = {{true}};
            UtilTaula.inicialitzaPrimeraDiagonal(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaPrimeraDiagonal() per 2x2")
        public void taula2x2() {
            boolean[][] taula = {{false, true}, {true, false}};
            boolean[][] expected = {{true, false}, {false, true}};
            UtilTaula.inicialitzaPrimeraDiagonal(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaPrimeraDiagonal() per 3x2")
        public void taula3x2() {
            boolean[][] taula = {{false, true}, {true, false}, {true, false}};
            boolean[][] expected = {{true, false}, {false, true}, {false, false}};
            UtilTaula.inicialitzaPrimeraDiagonal(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaPrimeraDiagonal() per 5x6")
        public void taula5x6() {
            boolean[][] taula = {
                {false,true,true,true,true,true},
                {true,false,true,true,true,false},
                {true,true,false,true,false,false},
                {true,true,true,false,false,false},
                {true,true,true,true,false,false}
            };
            boolean[][] expected = {
                {true,false,false,false,false,false},
                {false,true,false,false,false,false},
                {false,false,true,false,false,false},
                {false,false,false,true,false,false},
                {false,false,false,false,true,false}
            };
            UtilTaula.inicialitzaPrimeraDiagonal(taula);
            assertArrayEquals(expected, taula);
        }
    }

    /* ************************************************************ *
     * Test UtilTaula.inicialitzaSegonaDiagonal()
     * ************************************************************ */
    @Nested
    @DisplayName("Test de UtilTaula.inicialitzaSegonaDiagonal()")
    class SobreinicialitzaSegonaDiagonal {
        @Test
        @DisplayName("test UtilTaula.inicialitzaSegonaDiagonal() per 1x1")
        public void taula1x1() {
            boolean[][] taula = {{false}};
            boolean[][] expected = {{true}};
            UtilTaula.inicialitzaSegonaDiagonal(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaSegonaDiagonal() per 2x2")
        public void taula2x2() {
            boolean[][] taula = {{true, false}, {false, true}};
            boolean[][] expected = {{false, true}, {true, false}};
            UtilTaula.inicialitzaSegonaDiagonal(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaSegonaDiagonal() per 3x2")
        public void taula3x2() {
            boolean[][] taula = new boolean[3][2];
            boolean[][] expected = {{false, true}, {true, false}, {false, false}};
            UtilTaula.inicialitzaSegonaDiagonal(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaSegonaDiagonal() per 5x6")
        public void taula5x6() {
            boolean[][] taula = {
                {true,true,true,true,true,true},
                {true,true,false,true,true,true},
                {true,true,false,true,true,true},
                {true,true,false,true,true,true},
                {true,true,false,true,true,true}
            };
            boolean[][] expected = {
                {false,false,false,false,false,true},
                {false,false,false,false,true,false},
                {false,false,false,true,false,false},
                {false,false,true,false,false,false},
                {false,true,false,false,false,false}
            };
            UtilTaula.inicialitzaSegonaDiagonal(taula);
            assertArrayEquals(expected, taula);
        }
    }
    /* ************************************************************ *
     * Test UtilTaula.inicialitzaVerticalMig()
     * ************************************************************ */
    @Nested
    @DisplayName("Test de UtilTaula.inicialitzaVerticalMig()")
    class SobreinicialitzaVerticalMig {
        @Test
        @DisplayName("test UtilTaula.inicialitzaVerticalMig() per 1x1")
        public void taula1x1() {
            boolean[][] taula = {{false}};
            boolean[][] expected = {{true}};
            UtilTaula.inicialitzaVerticalMig(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaVerticalMig() per columnes parelles")
        public void taulaParelles() {
            boolean[][] taula = {
                {true,true,true,true},
                {false,false,false,false},
                {true,true,true,true},
            };
            boolean[][] expected = {
                {false,true,false,false},
                {false,true,false,false},
                {false,true,false,false},
            };
            UtilTaula.inicialitzaVerticalMig(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaVerticalMig() per columnes senars")
        public void taulaSenars() {
            boolean[][] taula = {
                {true,true,true,true,true},
                {false,false,false,false,true},
                {true,true,true,true,true},
                {true,true,true,true,true},
            };
            boolean[][] expected = {
                {false,false,true,false,false},
                {false,false,true,false,false},
                {false,false,true,false,false},
                {false,false,true,false,false},
            };
            UtilTaula.inicialitzaVerticalMig(taula);
            assertArrayEquals(expected, taula);
        }
    }
    /* ************************************************************ *
     * Test UtilTaula.inicialitzaHoritzontalMig()
     * ************************************************************ */
    @Nested
    @DisplayName("Test de UtilTaula.inicialitzaHoritzontalMig()")
    class SobreinicialitzaHoritzontalMig {
        @Test
        @DisplayName("test UtilTaula.inicialitzaHoritzontalMig() per 1x1")
        public void taula1x1() {
            boolean[][] taula = {{false}};
            boolean[][] expected = {{true}};
            UtilTaula.inicialitzaHoritzontalMig(taula);
            assertArrayEquals(expected, taula);
        }

        @Test
        @DisplayName("test UtilTaula.inicialitzaHoritzontalMig() per files senars")
        public void taulaSenars() {
            boolean[][] taula = {
                {true,true,true,true},
                {false,false,false,false},
                {true,true,true,true},
            };
            boolean[][] expected = {
                {false,false,false,false},
                {true,true,true,true},
                {false,false,false,false},
            };
            UtilTaula.inicialitzaHoritzontalMig(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaHoritzontalMig() per files parelles")
        public void taulaParelles() {
            boolean[][] taula = {
                {true,true,true,true,true},
                {true,true,true,true,true},
                {true,true,true,true,true},
                {true,true,true,true,true},
                {true,true,true,true,true},
            };
            boolean[][] expected = {
                {false,false,false,false,false},
                {false,false,false,false,false},
                {true,true,true,true,true},
                {false,false,false,false,false},
                {false,false,false,false,false},
            };
            UtilTaula.inicialitzaHoritzontalMig(taula);
            assertArrayEquals(expected, taula);
        }
    }
    /* ************************************************************ *
     * Test UtilTaula.inicialitzaPasVianants()
     * ************************************************************ */
    @Nested
    @DisplayName("Test de UtilTaula.inicialitzaPasVianants()")
    class SobreinicialitzaPasVianants {
        @Test
        @DisplayName("test UtilTaula.inicialitzaPasVianants() per 1x1")
        public void taula1x1() {
            boolean[][] taula = {{false}};
            boolean[][] expected = {{false}};
            UtilTaula.inicialitzaPasVianants(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaPasVianants() per 6x1")
        public void taula6x1() {
            boolean[][] taula = {{false}, {false}, {false}, {false}, {false}, {false}};
            boolean[][] expected = {{false}, {true}, {false}, {true}, {false}, {true}};
            UtilTaula.inicialitzaPasVianants(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaPasVianants() per 5x3")
        public void taula5x3() {
            boolean[][] taula = {
                {true,true,true},
                {false,false,false},
                {true,true,true},
                {false,false,false},
                {true,true,true},
            };
            boolean[][] expected = {
                {false,false,false},
                {true,true,true},
                {false,false,false},
                {true,true,true},
                {false,false,false},
            };
            UtilTaula.inicialitzaPasVianants(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaPasVianants() per 10x3")
        public void taula10x3() {
            boolean[][] taula = {
                {true,true,true},
                {false,false,false},
                {true,true,true},
                {false,false,false},
                {true,true,true},
                {true,true,true},
                {false,false,false},
                {true,true,true},
                {false,false,false},
                {true,true,true},
            };
            boolean[][] expected = {
                {false,false,false},
                {true,true,true},
                {false,false,false},
                {true,true,true},
                {false,false,false},
                {true,true,true},
                {false,false,false},
                {true,true,true},
                {false,false,false},
                {true,true,true},
            };
            UtilTaula.inicialitzaPasVianants(taula);
            assertArrayEquals(expected, taula);
        }
    }
    /* ************************************************************ *
     * Test UtilTaula.inicialitzaZebra()
     * ************************************************************ */
    @Nested
    @DisplayName("Test de UtilTaula.inicialitzaZebra()")
    class SobreinicialitzaZebra {
        @Test
        @DisplayName("test UtilTaula.inicialitzaZebra() per 1x1")
        public void taula1x1() {
            boolean[][] taula = {{false}};
            boolean[][] expected = {{false}};
            UtilTaula.inicialitzaZebra(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaZebra() per 1x6")
        public void taula1x6() {
            boolean[][] taula = {{false, false, false, false, false, false}};
            boolean[][] expected = {{false, true, false, true, false, true}};
            UtilTaula.inicialitzaZebra(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaZebra() per 3x5")
        public void taula3x5() {
            boolean[][] taula = {
                {true,true,true,true,true},
                {false,false,false,false,false},
                {true,true,true,true,true},
            };
            boolean[][] expected = {
                {false,true,false,true,false},
                {false,true,false,true,false},
                {false,true,false,true,false},
            };
            UtilTaula.inicialitzaZebra(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaZebra() per 3x10")
        public void taula3x10() {
            boolean[][] taula = {
                {true,true,true,true,true, true,true,true,true,true},
                {false,false,false,false,false,false,false,false,false,false},
                {true,true,true,true,true, true,true,true,true,true},
            };
            boolean[][] expected = {
                {false,true,false,true,false,true,false,true,false,true},
                {false,true,false,true,false,true,false,true,false,true},
                {false,true,false,true,false,true,false,true,false,true},
            };
            UtilTaula.inicialitzaZebra(taula);
            assertArrayEquals(expected, taula);
        }


    }
    /* ************************************************************ *
     * Test UtilTaula.inicialitzaEscacs()
     * ************************************************************ */
    @Nested
    @DisplayName("Test de UtilTaula.inicialitzaEscacs()")
    class SobreinicialitzaEscacs {
        @Test
        @DisplayName("test UtilTaula.inicialitzaEscacs() per 1x1")
        public void taula1x1() {
            boolean[][] taula = {{false}};
            boolean[][] expected = {{false}};
            UtilTaula.inicialitzaEscacs(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaEscacs() per 1x10")
        public void taula1x10() {
            boolean[][] taula = {{false,false,false,false,false,false,false,false,false,false}};
            boolean[][] expected = {{false,true,false,true,false,true,false,true,false,true}};
            UtilTaula.inicialitzaEscacs(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaEscacs() per 8x1")
        public void taula8x1() {
            boolean[][] taula = {
                {true},
                {false},
                {true},
                {false},
                {true},
                {false},
                {true},
                {false},
            };
            boolean[][] expected = {
                {false},
                {true},
                {false},
                {true},
                {false},
                {true},
                {false},
                {true},
            };
            UtilTaula.inicialitzaEscacs(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaEscacs() per 7x6")
        public void taula7x6() {
            boolean[][] taula = {
                {true,false,true,false,true,false},
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
                {true,false,true,false,true,false},
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
            };
            boolean[][] expected = {
                {false,true,false,true,false,true},
                {true,false,true,false,true,false},
                {false,true,false,true,false,true},
                {true,false,true,false,true,false},
                {false,true,false,true,false,true},
                {true,false,true,false,true,false},
                {false,true,false,true,false,true},
            };
            UtilTaula.inicialitzaEscacs(taula);
            assertArrayEquals(expected, taula);
        }
    }
    /* ************************************************************ *
     * Test UtilTaula.inicialitzaQuarts()
     * ************************************************************ */
    @Nested
    @DisplayName("Test de UtilTaula.inicialitzaQuarts()")
    class SobreinicialitzaQuarts {
        @Test
        @DisplayName("test UtilTaula.inicialitzaQuarts() per 1x1")
        public void taula1x1() {
            boolean[][] taula = {{false}};
            boolean[][] expected = {{true}};
            UtilTaula.inicialitzaQuarts(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaQuarts() per 2x2")
        public void taula2x2() {
            boolean[][] taula = {{true, true}, {true, true}};
            boolean[][] expected = {{true, true}, {true, false}};
            UtilTaula.inicialitzaQuarts(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaQuarts() per 3x3")
        public void taula3x3() {
            boolean[][] taula = {{true, false, true}, {false, false, true}, {true, true, true}};
            boolean[][] expected = {{false, true, false}, {true, true, true}, {false, true, false}};
            UtilTaula.inicialitzaQuarts(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaQuarts() per 4x6")
        public void taula4x6() {
            boolean[][] taula = {
                {true,true,true,false,false,false},
                {true,true,true,true,true,true},
                {true,true,true,false,false,false},
                {false,false,false,true,true,true},
            };
            boolean[][] expected = {
                {false,false,true,false,false,false},
                {true,true,true,true,true,true},
                {false,false,true,false,false,false},
                {false,false,true,false,false,false},
            };
            UtilTaula.inicialitzaQuarts(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaQuarts() per 3x7")
        public void taula3x7() {
            boolean[][] taula = {
                {true,false,false,true,false,true,true},
                {true,true,true,true,true,true,true},
                {true,true,false,true,false,false,true},
            };
            boolean[][] expected = {
                {false,false,false,true,false,false,false},
                {true,true,true,true,true,true,true},
                {false,false,false,true,false,false,false},
            };
            UtilTaula.inicialitzaQuarts(taula);
            assertArrayEquals(expected, taula);
        }
    }

    /* ************************************************************ *
     * Test UtilTaula.inicialitzaCreu()
     * ************************************************************ */
    @Nested
    @DisplayName("Test de UtilTaula.inicialitzaCreu()")
    class SobreinicialitzaCreu {
        @Test
        @DisplayName("test UtilTaula.inicialitzaCreu1x1() per 1x1")
        public void taula1x1() {
            boolean[][] taula = {{false}};
            boolean[][] expected = {{true}};
            UtilTaula.inicialitzaCreu(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaCreu7x7()")
        public void taula7x7() {
            boolean[][] taula = {
                {false,true,false,true,false,true,false},
                {false,true,false,true,false,true,false},
                {false,true,false,true,false,true,false},
                {false,true,false,true,false,true,false},
                {false,true,false,true,false,true,false},
                {false,true,false,true,false,true,false},
                {false,true,false,true,false,true,false},
            };
            boolean[][] expected = {
                {true,false,false,false,false,false,true},
                {false,true,false,false,false,true,false},
                {false,false,true,false,true,false,false},
                {false,false,false,true,false,false,false},
                {false,false,true,false,true,false,false},
                {false,true,false,false,false,true,false},
                {true,false,false,false,false,false,true},
            };
            UtilTaula.inicialitzaCreu(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaCreu5x5()")
        public void taula5x5() {
            boolean[][] taula = {
                {false,true,false,true,false},
                {false,true,false,true,false},
                {false,true,false,true,false},
                {false,true,false,true,false},
                {false,true,false,true,false},
            };
            boolean[][] expected = {
                {true,false,false,false,true},
                {false,true,false,true,false},
                {false,false,true,false,false},
                {false,true,false,true,false},
                {true,false,false,false,true},
            };
            UtilTaula.inicialitzaCreu(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaCreu6x6()")
        public void taula6x6() {
            boolean[][] taula = {
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
            };
            boolean[][] expected = {
                {true,false,false,false,false,true},
                {false,true,false,false,true,false},
                {false,false,true,true,false,false},
                {false,false,true,true,false,false},
                {false,true,false,false,true,false},
                {true,false,false,false,false,true},
            };
            UtilTaula.inicialitzaCreu(taula);
            assertArrayEquals(expected, taula);
        }
        @Test
        @DisplayName("test UtilTaula.inicialitzaCreu4x6()")
        public void taula4x6() {
            boolean[][] taula = {
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
                {false,true,false,true,false,true},
            };
            boolean[][] expected = {
                {true,false,false,false,false,true},
                {false,true,false,false,true,false},
                {false,false,true,true,false,false},
                {false,false,true,true,false,false},
            };
            UtilTaula.inicialitzaCreu(taula);
            assertArrayEquals(expected, taula);
        }
    }
}