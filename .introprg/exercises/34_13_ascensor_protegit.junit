import java.lang.reflect.Method;
import java.lang.reflect.Type;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.lang.reflect.Modifier;

public class TestExercise {

    @Test
    @DisplayName("test l'Ascensor s'inicialitza correctament")
    public void inicialitzatCorrectament() {
        Ascensor ascensor = new Ascensor();
        assertEquals(-1, ascensor.getPis(), "Revisa la inicialització de l'ascensor");
        assertEquals("aturat", ascensor.getMoviment(), "Revisa la inicialització de l'ascensor segons enunciat");
    }

    @Test
    @DisplayName("test l'ascensor sempre està en un pis vàlid")
    public void ascensorEnPisValidQuanValid() {
        for (int i=-1; i<=10; i++) {
            Ascensor ascensor = new Ascensor();
            ascensor.setPis(i);
            assertEquals(i, ascensor.getPis(), "Revisa setPis()");
        }
    }

    @Test
    @DisplayName("test l'ascensor sempre està en un pis vàlid")
    public void ascensorEnPisValidQuanNoValid() {
        for (int i=1; i<10; i++) {
            Ascensor ascensor = new Ascensor();
            ascensor.setPis(20 - i);
            assertEquals(-1, ascensor.getPis(), "Revisa setPis()");
            ascensor = new Ascensor();
            ascensor.setPis(20 + i);
            assertEquals(-1, ascensor.getPis(), "Revisa setPis()");
        }
    }

    @ParameterizedTest
    @CsvSource(value={
        "aturat, aturat",
        "pujant, pujant",
        "baixant, baixant",
        "tremolant, aturat",
        "saltant, aturat"
    })
    @DisplayName("test Ascensor quan canvia moviment")
    public void movimentCorrecte(String nouMoviment, String movimentFinal) {
        Ascensor ascensor = new Ascensor();
        ascensor.setMoviment(nouMoviment);
        assertEquals(movimentFinal, ascensor.getMoviment());
    }

    @Test
    @DisplayName("test totes les propietats són privades")
    public void propietatsPrivades() {
        assertFalse(Arrays.stream(Ascensor.class.getDeclaredFields())
                .anyMatch(f -> ! Modifier.isPrivate(f.getModifiers())),
                "Totes les propietats han de ser marcades com privades per evitar modificacions indesitjades");

    }

}